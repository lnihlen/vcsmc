#ifndef SRC_STATE_H_
#define SRC_STATE_H_

#include <array>

#include "codon.h"
#include "constants.h"
#include "types.h"

namespace vcsmc {

// A Snippet is a small amount of bytecode, up to two opcodes with arguments,
// generated by the State object when sequencing a Codon.
struct Snippet {
 public:
  Snippet() : size(0), duration(0) {
    bytecode.fill(0);
  }

  void Insert(uint8 byte) {
    ++size;
    assert(size < kSnippetMaxLength);
    bytecode[size] = byte;
  }

  // Most Snippets will be short but a kWait snippet can issue up to 128 NOPs
  static const size_t kSnippetMaxLength = 128;
  std::array<uint8, kSnippetMaxLength> bytecode;
  size_t size;
  // Duration is always in units of CPU cycles.
  uint32 duration;
};

// Tracks current state of TIA and registers. Used in sequencing codons into
// opcodes.
class State {
 public:
  State();

  Snippet Sequence(Codon codon);
  // Given the supplied Snippet, interpret the bytecode and update the State.
  void Apply(const Snippet& snippet);

  const uint8* tia() const { return tia_.data(); }
  const uint8* registers() const { return registers_.data(); }

 private:
  std::array<uint8, TIA_COUNT> tia_;
  std::array<uint8, REGISTER_COUNT> registers_;
  std::array<uint8, REGISTER_COUNT> register_last_used_;
  uint32 current_time_;
};

}

#endif  // SRC_STATE_H_
