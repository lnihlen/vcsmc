// build_laba_table - generates atari_laba_laba_color_table.h/cc in the provided
// output directory. Converts RGBA Atari colors to Lab colors.

#include <fcntl.h>
#include <gflags/gflags.h>
#include <memory>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#include "Halide.h"
#pragma clang diagnostic pop

#include "atari_ntsc_rgb_color_table.h"
#include "constants.h"
#include "rgb_to_lab.h"
#include "types.h"

DEFINE_string(output_directory, "../out",
    "Output directory to save generated files to.");

int main(int argc, char* argv[]) {
  gflags::ParseCommandLineFlags(&argc, &argv, false);

  // Build RGB planar input data for conversion to Lab planar output.
  Halide::Runtime::Buffer<uint8, 3> rgb_in(128, 1, 3);
  for (size_t i = 0; i < 128; ++i) {
    rgb_in.begin()[i] = vcsmc::kAtariNtscRedColorTable[i];
    rgb_in.begin()[i + 128] = vcsmc::kAtariNtscGreenColorTable[i];
    rgb_in.begin()[i + 256] = vcsmc::kAtariNtscBlueColorTable[i];
  }

  Halide::Runtime::Buffer<float, 3> lab_out(128, 1, 3);
  rgb_to_lab(rgb_in, lab_out);

  // Save code file of converted colors.
  std::string code_path = FLAGS_output_directory + "/" +
      "atari_ntsc_lab_color_table.cc";
  int fd = open(code_path.c_str(), O_WRONLY | O_CREAT | O_TRUNC,
      S_IRUSR | S_IWUSR);
  if (fd < 0) {
    fprintf(stderr, "error creating code file %s.\n", code_path.c_str());
    return -1;
  }
  std::string code_string =
      "// File generated by src/build_lab_table.cc, edit there.\n\n"

      "#include \"atari_ntsc_lab_color_table.h\"\n\n"

      "namespace vcsmc {\n\n";

  std::string L_string = "const float kAtariNtscLabLColorTable[128] = {\n";
  std::string a_string = "const float kAtariNtscLabAColorTable[128] = {\n";
  std::string b_string = "const float kAtariNtscLabBColorTable[128] = {\n";

  char buf[1024];
  for (size_t i = 0; i < 128; ++i) {
    snprintf(buf, 1024, "  %.12g,\n", lab_out.begin()[i]);
    L_string += std::string(buf);
    snprintf(buf, 1024, "  %.12g,\n", lab_out.begin()[i + 128]);
    a_string += std::string(buf);
    snprintf(buf, 1024, "  %.12g,\n", lab_out.begin()[i + 256]);
    b_string += std::string(buf);
  }

  code_string += L_string + "\n};\n";
  code_string += a_string + "\n};\n";
  code_string += b_string += "\n};\n\n}  // namespace vcsmc\n";

  size_t bytes_written = write(fd, code_string.c_str(), code_string.size());
  if (bytes_written != code_string.size()) {
    fprintf(stderr, "error writing code file %s.\n", code_path.c_str());
    return -1;
  }

  close(fd);
  return 0;
}
