#ifndef SRC_SHAPE_FIT_H_
#define SRC_SHAPE_FIT_H_

#include <vector>

#include "constants.h"
#include "types.h"

namespace vcsmc {

class Palette;
class PixelStrip;
class Spec;

// Abstract base class to represent a best effort of fitting a specific graphics
// object, in a given COLU class, to the provided line of pixels. Note that the
// input and output values are not in COLUs but in classes.
class ShapeFit {
 public:
  // Construct a ShapeFit from an initial vector of already-fit data in
  // |initial_fit| and which COLU class we will be fitting in |colu_class|.
  ShapeFit(const uint8* initial_fit, uint8 colu_class);

  // Actually does the work of fitting the shape to the |initial_fit| provided
  // in the constructor. Returns the number of pixels with matching color
  // classes as a result of this fit. A return value of kFrameWidthPixels would
  // mean a perfect score.
  virtual uint32 DoFit(const Palette* palette) = 0;

  // Return the total error distance, including the cost of mis-painted pixels,
  // for using this ShapeFit.
  float ComputeTotalError(const PixelStrip* strip, const Palette* palette);

  // Append our internal specs generated by this Fit to the provided vector
  // of Specs.
  void AppendSpecs(std::vector<Spec>* specs);

  uint32 pixels_matched() { return pixels_matched_; }
  const uint8* final_fit() { return fit_; }

 protected:
  uint8 colu_class_;
  uint8 fit_[kFrameWidthPixels];
  uint32 pixels_matched_;
  std::vector<Spec> specs_;
};

class PlayfieldShapeFit : public ShapeFit {
 public:
  PlayfieldShapeFit(const uint8* initial_fit, uint8 colu_class);
  virtual uint32 DoFit(const Palette* palette) override;
};

class PlayerShapeFit : public ShapeFit {
 public:
  // The first two arguments |initial_fit| and |colu_class| are the same as
  // in base class. Set |player_number| to 0 or 1 to control Spec generation
  // for P0 or P1. |last_player_position| is a color clock in the range
  // [0, kFrameWidthPixels) indicating the current state of the player
  // horizontal position timing clock, and |last_player_pattern| is the current
  // state of the player graphics pattern GP0/GP1.
  PlayerShapeFit(const uint8* initial_fit,
                 uint8 colu_class,
                 uint8 player_number,
                 uint32 last_player_position,
                 uint8 last_player_pattern);
  virtual uint32 DoFit(const Palette* palette) override;
};

}  // namespace vcsmc

#endif  // SRC_SHAPE_FIT_H_
