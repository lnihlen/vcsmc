#include "ciede_2k.h"
#include <gtest/gtest.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-parameter"
#pragma clang diagnostic ignored "-Wmissing-field-initializers"
#include "Halide.h"
#pragma clang diagnostic pop

#include "constants.h"

namespace vcsmc {

// Test example data taken from the helpful implementation notes and advice in:
// http://www.ece.rochester.edu/~gsharma/ciede2000/ciede2000noteCRNA.pdf
// "The CIEDE2000 Color-Difference Formula: Implementation Notes, Supplementary
// Test Data, and Mathematical Observations", G. Sharma, W. Wu, E. N. Dalal,
// Color Research and Application, vol. 30. No. 1, February 2005
TEST(Ciede2kTest, SharmaWuBalalTestData) {
  const size_t kSWBTestDataCount = 34;

  const float laba_a[kSWBTestDataCount * 4] = {
    50.0000,   2.6772, -79.7751,   1.0000,
    50.0000,   3.1571, -77.2803,   1.0000,
    50.0000,   2.8361, -74.0200,   1.0000,
    50.0000,  -1.3802, -84.2814,   1.0000,
    50.0000,  -1.1848, -84.8006,   1.0000,
    50.0000,  -0.9009, -85.5211,   1.0000,
    50.0000,   0.0000,   0.0000,   1.0000,
    50.0000,  -1.0000,   2.0000,   1.0000,
    50.0000,   2.4900,  -0.0010,   1.0000,
    50.0000,   2.4900,  -0.0010,   1.0000,
    50.0000,   2.4900,  -0.0010,   1.0000,
    50.0000,   2.4900,  -0.0010,   1.0000,
    50.0000,  -0.0010,   2.4900,   1.0000,
    50.0000,  -0.0010,   2.4900,   1.0000,
    50.0000,  -0.0010,   2.4900,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    50.0000,   2.5000,   0.0000,   1.0000,
    60.2574, -34.0099,  36.2677,   1.0000,
    63.0109, -31.0961,  -5.8663,   1.0000,
    61.2901,   3.7196,  -5.3901,   1.0000,
    35.0831, -44.1164,   3.7933,   1.0000,
    22.7233,  20.0904, -46.6940,   1.0000,
    36.4612,  47.8580,  18.3852,   1.0000,
    90.8027,  -2.0831,   1.4410,   1.0000,
    90.9257,  -0.5406,  -0.9208,   1.0000,
     6.7747,  -0.2908,  -2.4247,   1.0000,
     2.0776,   0.0795,  -1.1350,   1.0000
  };

  const float laba_b[kSWBTestDataCount * 4] = {
    50.0000,   0.0000, -82.7485,   1.0000,
    50.0000,   0.0000, -82.7485,   1.0000,
    50.0000,   0.0000, -82.7485,   1.0000,
    50.0000,   0.0000, -82.7485,   1.0000,
    50.0000,   0.0000, -82.7485,   1.0000,
    50.0000,   0.0000, -82.7485,   1.0000,
    50.0000,  -1.0000,   2.0000,   1.0000,
    50.0000,   0.0000,   0.0000,   1.0000,
    50.0000,  -2.4900,   0.0009,   1.0000,
    50.0000,  -2.4900,   0.0010,   1.0000,
    50.0000,  -2.4900,   0.0011,   1.0000,
    50.0000,  -2.4900,   0.0012,   1.0000,
    50.0000,   0.0009,  -2.4900,   1.0000,
    50.0000,   0.0010,  -2.4900,   1.0000,
    50.0000,   0.0011,  -2.4900,   1.0000,
    50.0000,   0.0000,  -2.5000,   1.0000,
    73.0000,  25.0000, -18.0000,   1.0000,
    61.0000,  -5.0000,  29.0000,   1.0000,
    56.0000, -27.0000,  -3.0000,   1.0000,
    58.0000,  24.0000,  15.0000,   1.0000,
    50.0000,   3.1736,   0.5854,   1.0000,
    50.0000,   3.2972,   0.0000,   1.0000,
    50.0000,   1.8634,   0.5757,   1.0000,
    50.0000,   3.2592,   0.3350,   1.0000,
    60.4626, -34.1751,  39.4387,   1.0000,
    62.8187, -29.7946,  -4.0864,   1.0000,
    61.4292,   2.2480,  -4.9620,   1.0000,
    35.0232, -40.0716,   1.5901,   1.0000,
    23.0331,  14.9730, -42.5619,   1.0000,
    36.2715,  50.5065,  21.2231,   1.0000,
    91.1528,  -1.6435,   0.0447,   1.0000,
    88.6381,  -0.8985,  -0.7239,   1.0000,
     5.8714,  -0.0985,  -2.2286,   1.0000,
     0.9033,  -0.0636,  -0.5514,   1.0000
  };

/*
  // Values expected for the G term.
  const float expected_results[kSWBTestDataCount] = {
    0.0001, 0.0001, 0.0001, 0.0001, 0.0001, 0.0001,
    0.5000, 0.5000, 0.4998, 0.4998, 0.4998, 0.4998,
    0.4998, 0.4998, 0.4998, 0.4998, 0.3827, 0.3981,
    0.4206, 0.4098, 0.4997, 0.4997, 0.4999, 0.4997,
    0.0017, 0.0490, 0.4966, 0.0063, 0.0026, 0.0013,
    0.4999, 0.5000, 0.4999, 0.5000
  };

  // Values expected for the C_1 term.
  const float expected_results[kSWBTestDataCount] = {
     79.8200,  77.3448,  74.0743,  84.2927,  84.8089,
     85.5258,   0.0000,   2.5000,   3.7346,   3.7346,
      3.7346,   3.7346,   2.4900,   2.4900,   2.4900,
      3.7496,   3.4569,   3.4954,   3.5514,   3.5244,
      3.7494,   3.7493,   3.7497,   3.7493,  49.7590,
     33.1427,   7.7487,  44.5557,  50.8532,  51.3256,
      3.4408,   1.2270,   2.4636,   1.1412
  };

  // Values expected for the h_1 term.
  const float expected_results[kSWBTestDataCount] = {
    271.9222, 272.3395, 272.1944, 269.0618, 269.1995,
    269.3964,   0.0000, 126.8697, 359.9847, 359.9847,
    359.9847, 359.9847,  90.0345,  90.0345,  90.0345,
      0.0000,   0.0000,   0.0000,   0.0000,   0.0000,
      0.0000,   0.0000,   0.0000,   0.0000, 133.2085,
    190.1951, 315.9240, 175.1161, 293.3339,  20.9901,
    155.2410, 228.6315, 259.8025, 275.9978
  };

  // Values expected for the h_2 term.
  const float expected_results[kSWBTestDataCount] = {
    270.0000, 270.0000, 270.0000, 270.0000, 270.0000,
    270.0000, 126.8697,   0.0000, 179.9862, 179.9847,
    179.9831, 179.9816, 270.0311, 270.0345, 270.0380,
    270.0000, 332.4939, 103.5532, 184.4723,  23.9095,
      7.0113,   0.0000,  11.6380,   3.9206, 130.9584,
    187.4490, 304.1385, 177.7418, 289.4279,  22.7660,
    178.9612, 208.2412, 266.2073, 260.1842
  };

  // Values expected for the h_mean term.
  const float expected_results[kSWBTestDataCount] = {
    270.9611, 271.1698, 271.0972, 269.5309, 269.5997,
    269.6982, 126.8697, 126.8697, 269.9854, 269.9847,
     89.9839,  89.9831, 180.0328, 180.0345,   0.0362,
    315.0000, 346.2470,  51.7766, 272.2362,  11.9548,
      3.5056,   0.0000,   5.8190,   1.9603, 132.0835,
    188.8221, 310.0313, 176.4290, 291.3809,  21.8781,
    167.1011, 218.4363, 263.0049, 268.0910
  };

  // Values expected for the T term.
  const float expected_results[kSWBTestDataCount] = {
    0.6907, 0.6843, 0.6865, 0.7357, 0.7335, 0.7303,
    1.2200, 1.2200, 0.7212, 0.7212, 0.6175, 0.6175,
    0.9779, 0.9779, 1.3197, 0.8454, 1.4453, 0.6447,
    0.6521, 1.1031, 1.2616, 1.3202, 1.2197, 1.2883,
    1.3010, 0.9402, 0.6952, 1.0168, 0.3636, 0.9239,
    1.1546, 1.3916, 0.9556, 0.7826
  };

  // Values expected for the S_L term.
  const float expected_results[kSWBTestDataCount] = {
    1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
    1.0000, 1.0000, 1.0000, 1.0000, 1.0000, 1.0000,
    1.0000, 1.0000, 1.0000, 1.0000, 1.1608, 1.0640,
    1.0251, 1.0400, 1.0000, 1.0000, 1.0000, 1.0000,
    1.1427, 1.1831, 1.1586, 1.2148, 1.4014, 1.1943,
    1.6110, 1.5930, 1.6517, 1.7246
  };

  // Values expected for the S_C term.
  const float expected_results[kSWBTestDataCount] = {
    4.6578, 4.6021, 4.5285, 4.7584, 4.7700, 4.7862,
    1.0562, 1.0562, 1.1681, 1.1681, 1.1681, 1.1681,
    1.1121, 1.1121, 1.1121, 1.1406, 1.9547, 1.7498,
    1.9455, 1.9120, 1.1923, 1.1956, 1.1486, 1.1946,
    3.2946, 2.4549, 1.3092, 2.9105, 3.1597, 3.3888,
    1.1329, 1.0620, 1.1057, 1.0383
  };

  // Values expected for the S_H term.
  const float expected_results[kSWBTestDataCount] = {
    1.8421, 1.8216, 1.8074, 1.9217, 1.9218, 1.9217,
    1.0229, 1.0229, 1.0404, 1.0404, 1.0346, 1.0346,
    1.0365, 1.0365, 1.0493, 1.0396, 1.4599, 1.1612,
    1.2055, 1.3353, 1.0808, 1.0861, 1.0604, 1.0836,
    1.9951, 1.4560, 1.0717, 1.6476, 1.2617, 1.7357,
    1.0511, 1.0288, 1.0337, 1.0100
  };

  // Values expected for the R_T term.
  const float expected_results[kSWBTestDataCount] = {
    -1.7042, -1.7070, -1.7060, -1.6809, -1.6822, -1.6840,
     0.0000,  0.0000, -0.0022, -0.0022,  0.0000,  0.0000,
     0.0000,  0.0000,  0.0000, -0.0001, -0.0003,  0.0000,
    -0.8219,  0.0000,  0.0000,  0.0000,  0.0000,  0.0000,
     0.0000,  0.0000, -0.0032,  0.0000, -1.2537,  0.0000,
     0.0000,  0.0000, -0.0004,  0.0000
  };
*/
  // Final values expected for the delta_e term.
  const float expected_results[kSWBTestDataCount] = {
     2.0425,   2.8615,   3.4412,   1.0000,   1.0000,   1.0000,
     2.3669,   2.3669,   7.1792,   7.1792,   7.2195,   7.2195,
     4.8045,   4.8045,   4.7461,   4.3065,  27.1492,  22.8977,
    31.9030,  19.4535,   1.0000,   1.0000,   1.0000,   1.0000,
     1.2644,   1.2630,   1.8731,   1.8645,   2.0373,   1.4146,
     1.4441,   1.5381,   0.6377,   0.9082
  };

  // Make 2D buffers by spreading data across two lines, to verify the 2D
  // behavior of the Generator.
  Halide::Runtime::Buffer<float, 3> lab_input_1(kSWBTestDataCount / 2, 2, 3);
  Halide::Runtime::Buffer<float, 3> lab_input_2(kSWBTestDataCount / 2, 2, 3);

  // De-interleave data from the arrays into planes in the Buffers.
  for (size_t i = 0; i < kSWBTestDataCount; ++i) {
    lab_input_1.begin()[i] =                           laba_a[i * 4];
    lab_input_1.begin()[i + kSWBTestDataCount] =       laba_a[(i * 4) + 1];
    lab_input_1.begin()[i + (2 * kSWBTestDataCount)] = laba_a[(i * 4) + 2];
    lab_input_2.begin()[i] =                           laba_b[i * 4];
    lab_input_2.begin()[i + kSWBTestDataCount] =       laba_b[(i * 4) + 1];
    lab_input_2.begin()[i + (2 * kSWBTestDataCount)] = laba_b[(i * 4) + 2];
  }

  for (size_t i = 0; i < kSWBTestDataCount; ++i) {
    ASSERT_EQ(laba_a[i * 4], lab_input_1.begin()[i]);
    ASSERT_EQ(laba_a[(i * 4) + 1], lab_input_1.begin()[i + kSWBTestDataCount]);
    ASSERT_EQ(laba_a[(i * 4) + 2],
              lab_input_1.begin()[i + (2 * kSWBTestDataCount)]);
    ASSERT_EQ(laba_b[i * 4], lab_input_2.begin()[i]);
    ASSERT_EQ(laba_b[(i * 4) + 1], lab_input_2.begin()[i + kSWBTestDataCount]);
    ASSERT_EQ(laba_b[(i * 4) + 2],
              lab_input_2.begin()[i + (2 * kSWBTestDataCount)]);
  }

  Halide::Runtime::Buffer<float, 2> ciede2k_output(kSWBTestDataCount / 2, 2);

  ciede_2k(lab_input_1, lab_input_2, ciede2k_output);

  for (size_t i = 0; i < kSWBTestDataCount; ++i) {
    EXPECT_NEAR(expected_results[i], ciede2k_output.begin()[i], 0.06f);
  }
}

}  // namespace vcsmc

