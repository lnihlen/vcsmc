#!/usr/bin/env python

import sys

from colormath.color_conversions import convert_color
from colormath.color_objects import LabColor
from colormath.color_objects import sRGBColor

def main(argv):
    # Build color table covering range of rgb gamut.
    rgb_colors = []
    lab_colors = []
    for r in range(0, 16):
        for g in range(0, 16):
            for b in range(0, 16):
                color = sRGBColor(r * 16, g * 16, b * 16, True)
                rgb_colors.append(color)
                lab_colors.append(convert_color(color, LabColor, target_illuminant='d65'))

    print("// generated by tools/make_rgb_to_lab_test_data.py")
    print("const size_t kTestImageWidth = 64;")
    print("const size_t kTestImageHeight = 64;")
    print("const uint8 kTestRGBImage[4096 * 3] = {")
    # Print out color table, we output the image in independent rgb color
    # planes.
    lines = []
    for c in range(0, 3):
        for i in range(0, int(len(rgb_colors) / 16)):
            line = []
            for j in range(0, 16):
                line.append("0x{:02x}".format(rgb_colors[(i * 16) + j].get_upscaled_value_tuple()[c]))
            lines.append(", ".join(line))

    print(",\n".join(lines))
    print("};  // kTestRGBImage\n")

    print("const float kTestLABImage[4096 * 3] = {")
    # Print out Lab color table, also in planes.
    lines = []
    for c in range(0, 3):
        for i in range(0, int(len(lab_colors) / 4)):
            line = []
            for j in range(0, 4):
                line.append("{:.32g}".format(lab_colors[(i * 4) + j].get_value_tuple()[c]))
            lines.append(", ".join(line))

    print(",\n".join(lines))
    print("};  // kTestLabImage")

if __name__ == '__main__':
    main(sys.argv)
